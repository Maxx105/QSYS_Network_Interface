-- Network Interface Plugin
-- by Maxx Sanner
-- February 2022

-- Information block for the plugin
PluginInfo = {
  Name = "My Plugins~Network Interface",
  Version = "1.0",
  BuildVersion = "1.0.0.0",
  Id = "799af688-8c3d-48e7-b34a-d44de2018716",
  Author = "Maxx Sanner",
  Description = "A plugin that allows to make network changes to any Core on the network"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Network Interface\nv" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Setup", "Lan A", "Lan B", "Aux A", "Aux B", "DNS" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  --buttons
  table.insert(ctrls, {Name = "Submit", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "Save"})
  table.insert(ctrls, {Name = "ID", ControlType = "Button", ButtonType = "Toggle", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "Refresh", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "Refresh"})
  table.insert(ctrls, {Name = "SubmitDNSServer", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "Plus"})
  table.insert(ctrls, {Name = "SubmitSearchDomain", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "Plus"})
  table.insert(ctrls, {Name = "RemoveDNSServer", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "Trash"})
  table.insert(ctrls, {Name = "RemoveSearchDomain", ControlType = "Button", ButtonType = "Trigger", Count = 1, UserPin = true, PinStyle = "Both", Icon = "Trash"})
  table.insert(ctrls, {Name = "SubmitStaticRoute", ControlType = "Button", ButtonType = "Trigger", Count = 4, UserPin = true, PinStyle = "Both", Icon="Plus"})
  table.insert(ctrls, {Name = "RemoveStaticRoute", ControlType = "Button", ButtonType = "Trigger", Count = 4, UserPin = true, PinStyle = "Both", Icon="Trash"})
  
  --text
  table.insert(ctrls, {Name = "Hostname", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "CoreIP", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "Status", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Output"})
  table.insert(ctrls, {Name = "DNSServers", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"}) --List Box
  table.insert(ctrls, {Name = "DNSSearchDomains", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"}) --List Box
  table.insert(ctrls, {Name = "AddedDNSServer", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "AddedSearchDomain", ControlType = "Text", Count = 1, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "MacAddress", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Output"})
  table.insert(ctrls, {Name = "LinkSpeed", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Output"})
  table.insert(ctrls, {Name = "Chassis", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Output"})
  table.insert(ctrls, {Name = "Mode", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Output"}) --List Box
  table.insert(ctrls, {Name = "IPAddress", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "NetMask", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "Gateway", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "Link", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Output"})
  table.insert(ctrls, {Name = "StaticRoutes", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Both"}) --List Box
  table.insert(ctrls, {Name = "StaticRoutesIP", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "StaticRoutesNetMask", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Both"})
  table.insert(ctrls, {Name = "StaticRoutesGateway", ControlType = "Text", Count = 4, UserPin = true, PinStyle = "Both"})
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  local nics = {"Lan A", "Lan B", "Aux A", "Aux B"}
  local lanInfo = {
    {label = "MAC Address:",pos = {15,82}}, 
    {label = "Link Speed:",pos = {415,82}}, 
    {label = "LLDP Information:",pos = {215,82}},
    {label = "Mode:",pos = {15,138}}, 
    {label = "IP Address:",pos = {155,138}}, 
    {label = "Net Mask:",pos = {297,138}}, 
    {label = "Gateway:",pos = {437,138}}, 
    {label = "Static Routes:",pos = {15,189}}, 
    {label = "IP Address:",pos = {15,206}}, 
    {label = "Net Mask:",pos = {155,206}}, 
    {label = "Gateway:",pos = {297,206}}
  }
  
  function commonControls(statusPos)
    layout["Status"] = {PrettyName = "Status", Style = "Text", Position = statusPos, Size = {557,23}, Color = {194,194,194}, FontSize = 12}
    layout["Submit"] = {PrettyName = "Submit", Style = "Button", Position = {486,15}, Size = {43,36}, Color = {13, 59, 106}, UnlinkOffColor = true, OffColor = {40, 126, 222}}
    layout["Refresh"] = {PrettyName = "Refresh", Style = "Button", Position = {532,15}, Size = {43,36}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}}
  end
  
  if CurrentPage == "Setup" then
    table.insert(graphics,{Type = "GroupBox", Text = "Setup", Fill = {210,220,255}, StrokeWidth = 1, Position = {5,5}, Size = {582,191}, CornerRadius = 8, IsBold = true})
    table.insert(graphics,{Type = "GroupBox", Text = "Connection Setup", StrokeWidth = 1, Position = {18,18}, Size = {170,127}, CornerRadius = 8, IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "Core IP:", Position = {25,59}, Size = {154,22}, FontSize = 14,HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "Hostname:", Position = {229,42}, Size = {86,17}, FontSize = 12, HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "ID:", Position = {229,92}, Size = {31,19}, FontSize = 12, HTextAlign = "Left", IsBold = true})
  
    layout["CoreIP"] = {PrettyName = "Setup~Core IP", Style = "Text", Position = {25,81}, Size = {155,23}, FontSize = 12, HTextAlign = "Left"}
    layout["Hostname"] = {PrettyName = "Setup~Hostname", Style = "Text", Position = {229,59}, Size = {151,23}, FontSize = 12, HTextAlign = "Left"}
    layout["ID"] = {PrettyName = "Setup~ID", Style = "Button", Position = {229,111}, Size = {49,29}}
  
    commonControls({17,163})
  elseif CurrentPage == "Lan A" then
    commonControls({15,366})
  elseif CurrentPage == "Lan B" then
    commonControls({15,366})
  elseif CurrentPage == "Aux A" then
    commonControls({15,366})
  elseif CurrentPage == "Aux B" then
    commonControls({15,366})
  elseif CurrentPage == "DNS" then
    table.insert(graphics,{Type = "GroupBox", Text = "DNS", Fill = {210,220,255}, StrokeWidth = 1, Position = {5,5}, Size = {585,274}, CornerRadius = 8, IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "DNS", Position = {20,18}, Size = {86,17}, FontSize = 14, HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "DNS Servers", Position = {20,74}, Size = {86,17}, FontSize = 12, HTextAlign = "Left", IsBold = true})
    table.insert(graphics,{Type = "Text", Text = "Search Domains", Position = {276,73}, Size = {112,17}, FontSize = 12, HTextAlign = "Left", IsBold = true})
    
    layout["AddedDNSServer"] = {PrettyName = "DNS~DNS Server", Style = "Text", Position = {112,70}, Size = {106,25}, FontSize = 12}
    layout["AddedSearchDomain"] = {PrettyName = "DNS~Search Domain", Style = "Text", Position = {369,70}, Size = {106,25}, FontSize = 12}
    layout["SubmitDNSServer"] = {PrettyName = "DNS~Add DNS Server", Style = "Button", Position = {227,70}, Size = {36,25}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}, Margin = 0}
    layout["SubmitSearchDomain"] = {PrettyName = "DNS~Add Search Domain", Style = "Button", Position = {483,70}, Size = {36,25}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}, Margin = 0}
    layout["DNSServers"] = {PrettyName = "DNS~DNS Servers", Style = "ListBox", Position = {20,104}, Size = {243,105}, FontSize = 12}
    layout["DNSSearchDomains"] = {PrettyName = "DNS~DNS Search Domains", Style = "ListBox", Position = {276,104}, Size = {243,105}, FontSize = 12}
    layout["RemoveDNSServer"] = {PrettyName = "DNS~Remove DNS Server", Style = "Button", Position = {20,209}, Size = {243,29}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}}
    layout["RemoveSearchDomain"] = {PrettyName = "DNS~Remove Search Domain", Style = "Button", Position = {276,209}, Size = {243,29}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}}
    commonControls({20,247})
  end
  
  for i, v in ipairs(nics) do
    if CurrentPage == v then
      table.insert(graphics,{Type = "GroupBox", Fill = {210,220,255}, StrokeWidth = 1, Position = {5,5}, Size = {580,400}, CornerRadius = 8})
      table.insert(graphics,{Type = "Text", Text = v, Position = {15,20}, Size = {86,17}, FontSize = 16, HTextAlign = "Left", IsBold = true})
      for j, lan in ipairs(lanInfo) do
        table.insert(graphics, {Type = "Text", Text = lan.label, Position = lan.pos, Size = {151,17}, FontSize = 12, HTextAlign = "Left", IsBold = true})
      end
  
      layout["Link "..i] = {PrettyName = v.."~Link", Style = "Text", Position = {15,48}, Size = {54,23}, FontSize = 10, Color={255,255,255,0}, StrokeWidth=0}
      layout["MacAddress "..i] = {PrettyName = v.."~Mac Address", Style = "Text", Position = {15,99}, Size = {151,23}, FontSize = 12, Color={194,194,194}, HTextAlign = "Left"}
      layout["LinkSpeed "..i] = {PrettyName = v.."~Link Speed", Style = "Text", Position = {415,99}, Size = {151,23}, FontSize = 12, Color={194,194,194}, HTextAlign = "Left"}
      layout["Chassis "..i] = {PrettyName = v.."~Chassis", Style = "Text", Position = {215,99}, Size = {151,23}, FontSize = 12, Color={194,194,194}, HTextAlign = "Left"}
      layout["Mode "..i] = {PrettyName = v.."~Mode", Style = "ComboBox", Position = {15,155}, Size = {107,23}, FontSize = 12, HTextAlign = "Left"}
      layout["IPAddress "..i] = {PrettyName = v.."~Lan IP Address", Style = "Text", Position = {155,155}, Size = {107,23}, FontSize = 12, HTextAlign = "Left"}
      layout["NetMask "..i] = {PrettyName = v.."~Lan Net Mask", Style = "Text", Position = {297,155}, Size = {107,23}, FontSize = 12, HTextAlign = "Left"}
      layout["Gateway "..i] = {PrettyName = v.."~Lan Gateway", Style = "Text", Position = {437,155}, Size = {107,23}, FontSize = 12, HTextAlign = "Left"}
      layout["StaticRoutesIP "..i] = {PrettyName = v.."~Static Routes IP Address", Style = "Text", Position = {15,223}, Size = {107,23}, FontSize = 12, HTextAlign = "Left"}
      layout["StaticRoutesNetMask "..i] = {PrettyName = v.."~Static Routes Net Mask", Style = "Text", Position = {155,223}, Size = {107,23}, FontSize = 12, HTextAlign = "Left"}
      layout["StaticRoutesGateway "..i] = {PrettyName = v.."~Static Routes Gateway", Style = "Text", Position = {297,223}, Size = {107,23}, FontSize = 12, HTextAlign = "Left"}
      layout["SubmitStaticRoute "..i] = {PrettyName = v.."~Static Routes Add", Style = "Button", Position = {445,223}, Size = {69,23}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}, Margin = 0}
      layout["StaticRoutes "..i] = {PrettyName = v.."~Static Routes", Style = "ListBox", Position = {15,261}, Size = {557,64}, FontSize = 12, HTextAlign = "Left"}
      layout["RemoveStaticRoute "..i] = {PrettyName = v.."~Static Routes Remove", Style = "Button", Position = {15,326}, Size = {557,29}, Color = {255,255,255}, UnlinkOffColor = true, OffColor = {124,124,124}}
    end
  end
  
  return layout, graphics
end

--Start event based logic
if Controls then
  json = require('rapidjson')
  
  --Controls
  local hostname = Controls.Hostname
  local ID = Controls.ID
  local dnsServers = Controls.DNSServers
  local dnsSearchDomains = Controls.DNSSearchDomains
  local removeDNSServer = Controls.RemoveDNSServer
  local removeSearchDomain = Controls.RemoveSearchDomain
  local removeStaticRoute = Controls.RemoveStaticRoute
  local staticRoutesIP = Controls.StaticRoutesIP
  local staticRoutesNetMask = Controls.StaticRoutesNetMask
  local staticRoutesGateway = Controls.StaticRoutesGateway
  local submitStaticRoute = Controls.SubmitStaticRoute
  local staticRoutes = Controls.StaticRoutes
  local macAddress = Controls.MacAddress
  local chassis = Controls.Chassis
  local linkSpeed = Controls.LinkSpeed
  local mode = Controls.Mode
  local ipAddress = Controls.IPAddress
  local netMask = Controls.NetMask
  local gateway = Controls.Gateway
  local link = Controls.Link
  local addedDNSServer = Controls.AddedDNSServer
  local submitDNSServer = Controls.SubmitDNSServer
  local addedSearchDomain = Controls.AddedSearchDomain
  local submitSearchDomain = Controls.SubmitSearchDomain
  local submit = Controls.Submit
  local coreIP = Controls.CoreIP
  local status = Controls.Status
  local refresh = Controls.Refresh
  
  local modeOptions = {"auto", "static", "off"}
  local nics = {"LAN A", "LAN B", "AUX A", "AUX B"}
  local dnsServersFromData = {}
  local dnsSearchDomainsFromData = {}
  local numOfInterfaces
  
  function setInterfaceTbl()
    local interfaceTbl = {}
    for i = 1, numOfInterfaces do
      table.insert(interfaceTbl, {
        name = nics[i],
        id = nics[i],
        mode = mode[i].String,
        ipAddress = ipAddress[i].String,
        netMask = netMask[i].String,
        gateway = gateway[i].String,
        staticRoutes = parseStaticRoutes(staticRoutes[i].Choices)
        -- macAddress = macAddress[i].String,
        -- chassis = chassis[i].String,
        -- port = "",
        -- linkSpeed = linkSpeed[i].String,
        -- hasLink = true
      })
    end
    return interfaceTbl
  end
  
  function setDataVar()
    return json.encode({
      hostname = hostname.String,
      interfaces = setInterfaceTbl(),
      dnsServers = dnsServersFromData,
      dnsSearchDomains = dnsSearchDomainsFromData
    })
  end
  
  function setStatusForPut(err, code, data)
    if err ~= nil or code ~= 201 then 
      status.String = math.floor(code)..": "..err
      else status.String = "Successfully updated data"
    end
    if data.message ~= nil then 
      status.String = math.floor(code)..": "..data.message
    end
  end
  
  function setStatusForGet(err, code, data)
    if err ~= nil or code ~= 200 then 
      status.String = math.floor(code)..": "..err
      if code == 404 then 
        status.String = "404 Not Found"
      end
    end
    if data.message ~= nil then 
      status.String = math.floor(code)..": "..data.message
    end
  end
  
  function setLinkStatus(link)
    if link == true then 
      return ""
    else return "(No Link)"
    end
  end
  
  function createDNSServersTable(data)
    local dnsServersTable = {}
    for i, interface in ipairs(data.interfaces) do 
      if interface.gateway ~= "" and interface.mode == "auto" then 
        table.insert(dnsServersTable, interface.gateway)
      end
    end
    table.insert(dnsServersTable, "________________________")
    for i, dnsServer in ipairs(data.dnsServers) do 
      table.insert(dnsServersTable, dnsServer)
    end
    return dnsServersTable
  end
  
  function handleNetworkPut(tbl, code, d, e)
    print(string.format("Response Code for Network PUT: %i\t\tErrors: %s",code, e or "None"))
    setStatusForPut(e, code, json.decode(d))
    getNetworkData() 
  end
  
  function handleNetworkGet(tbl, code, d, e)
    print(string.format("Response Code for Network GET: %i\t\tErrors: %s",code, e or "None"))
    setStatusForGet(e, code, json.decode(d))
    local networkData = json.decode(d)
    numOfInterfaces = #networkData.interfaces
    hostname.String = networkData.hostname
    dnsServers.Choices = createDNSServersTable(networkData)
    dnsSearchDomains.Choices = networkData.dnsSearchDomains
    for i, nic in ipairs(networkData.interfaces) do
      macAddress[i].String = nic.macAddress
      linkSpeed[i].String = nic.linkSpeed
      chassis[i].String = nic.chassis
      mode[i].String = nic.mode
      ipAddress[i].String = nic.ipAddress
      netMask[i].String = nic.netMask
      gateway[i].String = nic.gateway
      link[i].String = setLinkStatus(nic.hasLink)
      staticRoutes[i].Choices = getStaticRoutesData(nic.staticRoutes)
    end
    dnsServersFromData = networkData.dnsServers
    dnsSearchDomainsFromData = networkData.dnsSearchDomains
  end
  
  function getStaticRoutesData(data) 
    local staticRoutesTbl = {}
    for i, v in ipairs(data) do 
      table.insert(staticRoutesTbl, v.ipAddress.." -- "..v.netMask.." -- "..v.gateway)
    end
    return staticRoutesTbl
  end
  
  function handleIDPut(tbl, code, d, e)
    print(string.format("Response Code for ID PUT: %i\t\tErrors: %s",code, e or "None"))
    -- setStatusForPut(e, json.decode(d).code, json.decode(d).message)
  end
  
  function handleIDGet(tbl, code, d, e)
    print(string.format("Response Code for ID GET: %i\t\tErrors: %s",code, e or "None"))
    setStatusForGet(e, code, json.decode(d))
    Controls.ID.Boolean = json.decode(d).mode
  end
  
  function setIDState()
    if Controls.ID.Boolean then 
      updateIDData(true)
    else 
      updateIDData(false)
    end
  end
  
  function setModeOptionsInit()
    for i = 1, 2 do 
      mode[i].Choices = modeOptions
    end
  end
  
  function getIndexInTable(tbl, val)
    local index={}
    for k,v in pairs(tbl) do
      index[v]=k
    end
    return index[val]
  end
  
  function deleteDNSServer() 
    local dnsTbl = dnsServers.Choices
    local comboBoxIndex = getIndexInTable(dnsServers.Choices, dnsServers.String)
    local dataIndex = getIndexInTable(dnsServersFromData, dnsServers.String)
    if dataIndex ~= nil then
      table.remove(dnsTbl, comboBoxIndex)
      table.remove(dnsServersFromData, dataIndex)
    end
    dnsServers.Choices = dnsTbl
  end
  
  function deleteSearchDomain()
    local index = getIndexInTable(dnsSearchDomains.Choices, dnsSearchDomains.String)
    table.remove(dnsSearchDomainsFromData, index)
    dnsSearchDomains.Choices = dnsSearchDomainsFromData
  end
  
  function deleteStaticRoute(i)
    for ix, v in ipairs(staticRoutes) do
      if ix == i then
        local staticRoutesTbl = staticRoutes[i].Choices
        local index = getIndexInTable(staticRoutes[i].Choices, staticRoutes[i].String)
        table.remove(staticRoutesTbl, index)
        staticRoutes[i].Choices = staticRoutesTbl
      end
    end
  end
  
  function addDNSServer()
    local dnsTbl = dnsServers.Choices
    -- This table is for ALL DNS servers and line that separates auto added DNS servers and user created ones.
    table.insert(dnsTbl, addedDNSServer.String)
    -- This table is for only the user added DNS servers
    table.insert(dnsServersFromData, addedDNSServer.String)
    dnsServers.Choices = dnsTbl
    addedDNSServer.String = ""
  end
  
  function addDNSSearchDomain()
    table.insert(dnsSearchDomainsFromData, addedSearchDomain.String)
    dnsSearchDomains.Choices = dnsSearchDomainsFromData
    addedSearchDomain.String = ""
  end
  
  function createStaticRoute(ix)
    for i = 1, ix do
      if ix == i then
        local staticRoutesLanATbl = staticRoutes[i].Choices
        table.insert(staticRoutesLanATbl, staticRoutesIP[i].String.." -- "..staticRoutesNetMask[i].String.." -- "..staticRoutesGateway[i].String)
        staticRoutes[i].Choices = staticRoutesLanATbl
        staticRoutesIP[i].String = ""
        staticRoutesNetMask[i].String = ""
        staticRoutesGateway[i].String = ""
      end
    end
  end
  
  function parseStaticRoutes(sr)
    local parsedDataTbl = {}
    local returnTbl = {}
    for i, v in ipairs(sr) do
      local parsedDataTbl = {}
      for w in string.gmatch(v, "%g+%x") do 
        table.insert(parsedDataTbl, w)
      end
      table.insert(returnTbl, {
        ipAddress = parsedDataTbl[1],
        netMask = parsedDataTbl[2],
        gateway = parsedDataTbl[3]
      })
    end
    if json.encode(returnTbl) ~= '{}' then
      return returnTbl
      else return json.decode('[]')
    end
  end
  
  function updateNetworkData() 
    HttpClient.Upload { 
      Url = "http://"..coreIP.String.."/api/v0/cores/self/config/network", 
      Method = "PUT",
      Headers = { 
        ["Content-Type"] = "application/json"
      }, 
      Timeout = 5, 
      Data = setDataVar(),
      EventHandler = handleNetworkPut
    }
  end
  
  function getNetworkData() 
    HttpClient.Download { 
      Url = "http://"..coreIP.String.."/api/v0/cores/self/config/network", 
      Method = "GET",
      Headers = { ["Content-Type"] = "application/json" } , 
      Timeout = 5, 
      EventHandler = handleNetworkGet
    }
  end
  
  function updateIDData(idState) 
    HttpClient.Upload { 
      Url = "http://"..coreIP.String.."/api/v0/cores/self/config/id_mode", 
      Method = "PUT",
      Headers = { 
        ["Content-Type"] = "application/json"
      }, 
      Timeout = 5, 
      Data = json.encode({mode = idState}),
      EventHandler = handleIDPut
    }
  end
  
  function getIDData() 
    HttpClient.Download { 
      Url = "http://"..coreIP.String.."/api/v0/cores/self/config/id_mode", 
      Method = "GET",
      Headers = { ["Content-Type"] = "application/json" } , 
      Timeout = 5, 
      EventHandler = handleIDGet
    }
  end
  
  function getDataInit()
    status.String = ""
    getIDData()
    getNetworkData()  
  end
  
  if coreIP.String ~= "" then
    getDataInit()
  end
  
  setModeOptionsInit()
  
  submitDNSServer.EventHandler = addDNSServer
  submitSearchDomain.EventHandler = addDNSSearchDomain
  removeDNSServer.EventHandler = deleteDNSServer
  removeSearchDomain.EventHandler = deleteSearchDomain
  refresh.EventHandler = getDataInit
  coreIP.EventHandler = getDataInit
  ID.EventHandler = setIDState
  submit.EventHandler = updateNetworkData
  for i, v in ipairs(submitStaticRoute) do 
    v.EventHandler = function()
      createStaticRoute(i)
    end
  end
  for i, v in ipairs(removeStaticRoute) do 
    v.EventHandler = function()
      deleteStaticRoute(i)
    end
  end
end
